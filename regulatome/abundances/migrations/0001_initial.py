# Generated by Django 2.2.4 on 2020-02-18 19:07

from django.db import migrations, models
import django.db.models.deletion
import django_mysql.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Gene',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gene_id', models.CharField(default='', max_length=15, verbose_name='Gene ID')),
            ],
        ),
        migrations.CreateModel(
            name='IndexAbundance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gene_id', models.CharField(max_length=10, verbose_name='Gene ID')),
                ('time_course_tokens', models.CharField(default='', max_length=20, verbose_name='48h')),
                ('single_time_tokens', models.CharField(default='', max_length=20, verbose_name='Snap')),
                ('time_course', django_mysql.models.ListCharField(models.IntegerField(default=999999, verbose_name='TimeCourseID'), default=None, max_length=1000, size=None)),
                ('single_time_point', django_mysql.models.ListCharField(models.IntegerField(default=999999, verbose_name='SingleTimePointID'), default=None, max_length=1000, size=None)),
            ],
        ),
        migrations.CreateModel(
            name='MultiTime',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('accession', models.CharField(default='', max_length=10, verbose_name='Accession')),
                ('uniq_gene_id', models.CharField(default='', max_length=20, verbose_name='uniq_gene_id')),
                ('description', models.CharField(default='', max_length=80, verbose_name='Description')),
                ('taxonomy', models.CharField(default='', max_length=20, verbose_name='Taxonomy')),
                ('protein_fdr_confidence_combined', models.CharField(default='', max_length=10, verbose_name='Protein FDR Confidence: Combined')),
                ('missing_values', models.FloatField(default=0, verbose_name='Missing values')),
                ('s_by_n', models.FloatField(default=999, verbose_name='Log10(S/N)')),
                ('r1_a', models.FloatField(default=1.0, verbose_name='Abundance Resting_1')),
                ('r2_a', models.FloatField(default=1.0, verbose_name='Abundance Resting_2')),
                ('a1_a', models.FloatField(default=1.0, verbose_name='Abundance Activated_1')),
                ('a2_a', models.FloatField(default=1.0, verbose_name='Abundance Activated_2')),
                ('m24_a', models.FloatField(default=1.0, verbose_name='Abundance 24h_Mock')),
                ('pos24_a', models.FloatField(default=1.0, verbose_name='Abundance 24h_Pos')),
                ('neg24_a', models.FloatField(default=1.0, verbose_name='Abundance 24h_Neg')),
                ('m48_a', models.FloatField(default=1.0, verbose_name='Abundance 48h_Mock')),
                ('pos48_a', models.FloatField(default=1.0, verbose_name='Abundance 48h_Pos')),
                ('neg48_a', models.FloatField(default=1.0, verbose_name='Abundance 48h_Neg')),
                ('log2_r1a_by_r2a', models.FloatField(default=1.0, verbose_name='Abundance Resting Lg2Ratio')),
                ('log2_a1a_by_a2a', models.FloatField(default=1.0, verbose_name='Abundance Activated Lg2Ratio')),
                ('log2_p24a_by_m24a', models.FloatField(default=1.0, verbose_name='Abundance Positive 24 Lg2Ratio')),
                ('log2_n24a_by_m24a', models.FloatField(default=1.0, verbose_name='Abundance Negative 24 Lg2Ratio')),
                ('log2_p48a_by_m48a', models.FloatField(default=1.0, verbose_name='Abundance Positive 48 Lg2Ratio')),
                ('log2_n48a_by_m48a', models.FloatField(default=1.0, verbose_name='Abundance Negative 48 Lg2Ratio')),
                ('r1', models.FloatField(default=1.0, verbose_name='Resting_1')),
                ('r2', models.FloatField(default=1.0, verbose_name='Resting_2')),
                ('a1', models.FloatField(default=1.0, verbose_name='Activated_1')),
                ('a2', models.FloatField(default=1.0, verbose_name='Activated_2')),
                ('m24', models.FloatField(default=1.0, verbose_name='24h_Mock')),
                ('pos24', models.FloatField(default=1.0, verbose_name='24h_Pos')),
                ('neg24', models.FloatField(default=1.0, verbose_name='24h_Neg')),
                ('m48', models.FloatField(default=1.0, verbose_name='48h_Mock')),
                ('pos48', models.FloatField(default=1.0, verbose_name='48h_Pos')),
                ('neg48', models.FloatField(default=1.0, verbose_name='48h_Neg')),
            ],
        ),
        migrations.CreateModel(
            name='SingleTime',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('accession', models.CharField(default='', max_length=10, verbose_name='Accession')),
                ('uniq_gene_id', models.CharField(default='', max_length=20, verbose_name='uniq_gene_id')),
                ('description', models.CharField(default='', max_length=80, verbose_name='Description')),
                ('taxonomy', models.CharField(default='', max_length=20, verbose_name='Taxonomy')),
                ('protein_fdr_confidence_combined', models.CharField(default='', max_length=10, verbose_name='Protein FDR Confidence: Combined')),
                ('missing_values', models.FloatField(default=0, verbose_name='Missing values')),
                ('s_by_n', models.FloatField(default=999, verbose_name='Log10(S/N)')),
                ('log2_wt_by_mock', models.FloatField(default=1.0, verbose_name='Log2(WT/Mock)')),
                ('p_wt_by_mock', models.FloatField(default=1.0, verbose_name='p_WT/Mock')),
                ('q_wt_by_mock', models.FloatField(default=1.0, verbose_name='q_WT/Mock')),
                ('log2_delta_vif_by_mock', models.FloatField(default=1.0, verbose_name='Log2(ΔVif/Mock)')),
                ('p_delta_vif_by_mock', models.FloatField(default=1.0, verbose_name='p_ΔVif/Mock')),
                ('q_delta_vif_by_mock', models.FloatField(default=1.0, verbose_name='q_ΔVif/Mock')),
                ('log2_wt_by_delta_vif', models.FloatField(default=1.0, verbose_name='Log2(WT/ΔVif)')),
                ('p_wt_by_delta_vif', models.FloatField(default=1.0, verbose_name='p_WT/ΔVif')),
                ('q_wt_by_delta_vif', models.FloatField(default=1.0, verbose_name='q_WT/ΔVif')),
                ('a_mock', models.FloatField(default=1.0, verbose_name='A_Mock')),
                ('b_mock', models.FloatField(default=1.0, verbose_name='B_Mock')),
                ('c_mock', models.FloatField(default=1.0, verbose_name='C_Mock')),
                ('a_wt', models.FloatField(default=1.0, verbose_name='A_WT')),
                ('b_wt', models.FloatField(default=1.0, verbose_name='B_WT')),
                ('c_wt', models.FloatField(default=1.0, verbose_name='C_WT')),
                ('a_delta_vif', models.FloatField(default=1.0, verbose_name='A_ΔVif')),
                ('b_delta_vif', models.FloatField(default=1.0, verbose_name='B_ΔVif')),
                ('c_delta_vif', models.FloatField(default=1.0, verbose_name='C_ΔVif')),
            ],
        ),
        migrations.CreateModel(
            name='SingleTimePoint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('accession', models.CharField(max_length=10, verbose_name='Accession')),
                ('gene_id', models.CharField(default='', max_length=20, verbose_name='uniq_gene_id')),
                ('uniq_gene_id', models.CharField(default='', max_length=20, verbose_name='uniq_gene_id')),
                ('description', models.CharField(max_length=80, verbose_name='Description')),
                ('taxonomy', models.CharField(max_length=20, verbose_name='Taxonomy')),
                ('protein_fdr_confidence_combined', models.CharField(max_length=10, verbose_name='Protein FDR Confidence: Combined')),
                ('missing_values', models.FloatField(verbose_name='Missing values')),
                ('s_by_n', models.FloatField(verbose_name='Log10(S/N)')),
                ('unique_peptides', models.PositiveSmallIntegerField(verbose_name='# Unique Peptides')),
                ('log2_wt_by_mock', models.FloatField(default=1.0, verbose_name='Log2(WT/Mock)')),
                ('p_wt_by_mock', models.FloatField(default=1.0, verbose_name='p_WT/Mock')),
                ('q_wt_by_mock', models.FloatField(default=1.0, verbose_name='q_WT/Mock')),
                ('log2_delta_vif_by_mock', models.FloatField(default=1.0, verbose_name='Log2(ΔVif/Mock)')),
                ('p_delta_vif_by_mock', models.FloatField(default=1.0, verbose_name='p_ΔVif/Mock')),
                ('q_delta_vif_by_mock', models.FloatField(default=1.0, verbose_name='q_ΔVif/Mock')),
                ('log2_wt_by_delta_vif', models.FloatField(default=1.0, verbose_name='Log2(WT/ΔVif)')),
                ('p_wt_by_delta_vif', models.FloatField(default=1.0, verbose_name='p_WT/ΔVif')),
                ('q_wt_by_delta_vif', models.FloatField(default=1.0, verbose_name='q_WT/ΔVif')),
                ('a_mock', models.FloatField(default=1.0, verbose_name='A_Mock')),
                ('b_mock', models.FloatField(default=1.0, verbose_name='B_Mock')),
                ('c_mock', models.FloatField(default=1.0, verbose_name='C_Mock')),
                ('a_wt', models.FloatField(default=1.0, verbose_name='A_WT')),
                ('b_wt', models.FloatField(default=1.0, verbose_name='B_WT')),
                ('c_wt', models.FloatField(default=1.0, verbose_name='C_WT')),
                ('a_delta_vif', models.FloatField(default=1.0, verbose_name='A_ΔVif')),
                ('b_delta_vif', models.FloatField(default=1.0, verbose_name='B_ΔVif')),
                ('c_delta_vif', models.FloatField(default=1.0, verbose_name='C_ΔVif')),
            ],
        ),
        migrations.CreateModel(
            name='TimeCourse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('accession', models.CharField(max_length=10, verbose_name='Accession')),
                ('gene_id', models.CharField(default='', max_length=20, verbose_name='uniq_gene_id')),
                ('uniq_gene_id', models.CharField(default='', max_length=20, verbose_name='uniq_gene_id')),
                ('description', models.CharField(max_length=80, verbose_name='Description')),
                ('taxonomy', models.CharField(max_length=20, verbose_name='Taxonomy')),
                ('protein_fdr_confidence_combined', models.CharField(max_length=10, verbose_name='Protein FDR Confidence: Combined')),
                ('missing_values', models.FloatField(verbose_name='Missing values')),
                ('s_by_n', models.FloatField(verbose_name='Log10(S/N)')),
                ('unique_peptides', models.PositiveSmallIntegerField(verbose_name='# Unique Peptides')),
                ('r1_a', models.FloatField(default=1.0, verbose_name='Abundance Resting_1')),
                ('r2_a', models.FloatField(default=1.0, verbose_name='Abundance Resting_2')),
                ('a1_a', models.FloatField(default=1.0, verbose_name='Abundance Activated_1')),
                ('a2_a', models.FloatField(default=1.0, verbose_name='Abundance Activated_2')),
                ('m24_a', models.FloatField(default=1.0, verbose_name='Abundance 24h_Mock')),
                ('pos24_a', models.FloatField(default=1.0, verbose_name='Abundance 24h_Pos')),
                ('neg24_a', models.FloatField(default=1.0, verbose_name='Abundance 24h_Neg')),
                ('m48_a', models.FloatField(default=1.0, verbose_name='Abundance 48h_Mock')),
                ('pos48_a', models.FloatField(default=1.0, verbose_name='Abundance 48h_Pos')),
                ('neg48_a', models.FloatField(default=1.0, verbose_name='Abundance 48h_Neg')),
                ('log2_r1a_by_r2a', models.FloatField(default=1.0, verbose_name='Abundance Resting Lg2Ratio')),
                ('log2_a1a_by_a2a', models.FloatField(default=1.0, verbose_name='Abundance Activated Lg2Ratio')),
                ('log2_p24a_by_m24a', models.FloatField(default=1.0, verbose_name='Abundance Positive 24 Lg2Ratio')),
                ('log2_n24a_by_m24a', models.FloatField(default=1.0, verbose_name='Abundance Negative 24 Lg2Ratio')),
                ('log2_p48a_by_m48a', models.FloatField(default=1.0, verbose_name='Abundance Positive 48 Lg2Ratio')),
                ('log2_n48a_by_m48a', models.FloatField(default=1.0, verbose_name='Abundance Negative 48 Lg2Ratio')),
                ('r1', models.FloatField(verbose_name='Resting_1')),
                ('r2', models.FloatField(verbose_name='Resting_2')),
                ('a1', models.FloatField(verbose_name='Activated_1')),
                ('a2', models.FloatField(verbose_name='Activated_2')),
                ('m24', models.FloatField(verbose_name='24h_Mock')),
                ('pos24', models.FloatField(verbose_name='24h_Pos')),
                ('neg24', models.FloatField(verbose_name='24h_Neg')),
                ('m48', models.FloatField(verbose_name='48h_Mock')),
                ('pos48', models.FloatField(verbose_name='48h_Pos')),
                ('neg48', models.FloatField(verbose_name='48h_Neg')),
            ],
        ),
        migrations.AddConstraint(
            model_name='timecourse',
            constraint=models.UniqueConstraint(fields=('gene_id', 'r1', 'r2', 'a1', 'a2', 'm24', 'pos24', 'neg24', 'm48', 'pos48', 'neg48'), name='unique_entry'),
        ),
        migrations.AddConstraint(
            model_name='singletimepoint',
            constraint=models.UniqueConstraint(fields=('gene_id', 'log2_wt_by_mock', 'p_wt_by_mock', 'q_wt_by_mock', 'log2_delta_vif_by_mock', 'p_wt_by_delta_vif', 'q_wt_by_delta_vif', 'a_mock', 'b_mock', 'c_mock', 'a_wt', 'b_wt', 'c_wt', 'a_delta_vif', 'b_delta_vif', 'c_delta_vif'), name='unique_entry'),
        ),
        migrations.AddField(
            model_name='singletime',
            name='gene_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='abundances.Gene'),
        ),
        migrations.AddField(
            model_name='multitime',
            name='gene_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='abundances.Gene'),
        ),
        migrations.AddConstraint(
            model_name='gene',
            constraint=models.UniqueConstraint(fields=('gene_id',), name='unique_entry'),
        ),
        migrations.AddConstraint(
            model_name='singletime',
            constraint=models.UniqueConstraint(fields=('gene_id', 'log2_wt_by_mock', 'p_wt_by_mock', 'q_wt_by_mock', 'log2_delta_vif_by_mock', 'p_wt_by_delta_vif', 'q_wt_by_delta_vif', 'a_mock', 'b_mock', 'c_mock', 'a_wt', 'b_wt', 'c_wt', 'a_delta_vif', 'b_delta_vif', 'c_delta_vif'), name='unique_entry'),
        ),
        migrations.AddConstraint(
            model_name='multitime',
            constraint=models.UniqueConstraint(fields=('gene_id', 'r1', 'r2', 'a1', 'a2', 'm24', 'pos24', 'neg24', 'm48', 'pos48', 'neg48'), name='unique_entry'),
        ),
    ]
