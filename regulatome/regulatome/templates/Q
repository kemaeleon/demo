{% extends 'base.html' %}
{% load django_tables2 %}
{% load bootstrap3 %}
{% load render_table from django_tables2 %}

{% load static %}
<script>

{% block jquery %}
var dt = {{data_tc|safe}};
if (dt) {
for (d of dt) {
    console.log(d.r2_a, d.uniq_gene_id);
var r1 = d.r2_a; 
var r2 =  d.r1_a;
var a1 =  d.a2_a;
var a2 =  d.a1_a;
var m24 =  d.m24_a;
var pos24 =   d.pos24_a;
var neg24 =  d.neg24_a;
var m48 = d.m48_a;
var pos48 =  d.pos48_a;
var neg48 = d.neg48_a;
var gene_id = d.uniq_gene_id;
console.log(gene_id, neg48)
setChart();


function setChart(){
    var ctx = document.getElementById("myChart");
    var my_id = gene_id;
    var canvas = document.getElementById(my_id);
    var tmp = new Chart(canvas, {
    type: 'bar',
    data: {
      labels: ['Resting','Activated','24h','48h'],
      datasets: [{
      label: "Control",
      backgroundColor: 'rgba(0, 0, 30, 0.4)',
      data: [r1, a1, null, null]	      
   }, {
      label: "Expt_Resting/Activated",
      backgroundColor: 'rgba(0, 0, 30, 0.2)',
      data: [r2,a2,m24,m48]	   
   }, {
      label: "Expt_LNGFR+(HIV-infected, selected)",
      backgroundColor:'rgba(255, 0, 0, 0.2)',
      borderColor:'rgba(255,0,0, 1)',
      data: [null,null,pos24,pos48]	   
   }, {
      label: "Expt:LNGFR-(uninfected, flow-through)",
      backgroundColor: 'rgb(0, 0, 255, 0.2)',
      borderColor: 'rgba(0, 0, 255, 1)',
      data: [null,null,neg24,neg48]
	     }, {
      label: "infected/Control",
      borderColor: 'rgba(255, 0, 0, 0.6)',
      data: [Math.log2(r1/r2).toFixed(2), Math.log2(a1/a2).toFixed(2), Math.log2(pos24/m24).toFixed(2), Math.log2(pos48/m48).toFixed(2)],
      yAxisID: 'B',
      type: 'line',
      lineTension: 0.1
    }, {
      label: "uninfected/Control",
      borderColor: 'rgb(0, 0, 255, 0.6)',
      data: [Math.log2(r1/r2).toFixed(2), Math.log2(a1/a2).toFixed(2), Math.log2(neg24/m24).toFixed(2), Math.log2(neg48/m48).toFixed(2)],
      yAxisID: 'B',
      type: 'line',
      lineTension: 0.1
   }]
    },
    options: {
	      legend: {position: 'left'},
        scales: {
  xAxes: [{
        ticks: {
            autoSkip: false,
            maxRotation: 90,
            minRotation: 90
        }
    }], 



            yAxes: [ 
     {
        id: 'A',
        type: 'linear',
        position: 'left',
        scalePositionLeft: true,
	     ticks: {
                    beginAtZero: true,
                    suggestedMin: 0,
                    suggestedMax: 1.25
                },
	     scaleLabel: {
        display: true,
        labelString: 'Abundance (fraction max.)'
      }
      },
      {
        id: 'B',
        type: 'linear',
        position: 'right',
        scalePositionLeft: false,
                ticks: {
                    beginAtZero: false,
	 	    suggestedMin: -2,
		    suggestedMax: 0.5
                },
	      scaleLabel: {
        display: true,
        labelString: 'Log2(Expt/Ctrl)'
      }
            }]
        }
    }
});
}
}
}


var st = {{data_stp|safe}};
if (st) {
console.log('YES')
for (d of st) {
var a_mock =  d.a_a_mock
console.log(d)
console.log(a_mock)
var b_mock =   d.a_b_mock
var c_mock =   d.a_c_mock
var a_wt =  d.a_a_wt
var b_wt =   d.a_b_wt
var c_wt =    d.a_c_wt
var a_delta_vif  =   d.a_a_delta_vif
var b_delta_vif  =  d.a_b_delta_vif
var c_delta_vif  =  d.a_c_delta_vif
var gene_id = d.uniq_gene_id
setChart();


function setChart(){
    var ctx = document.getElementById("myChart");
    var my_id = gene_id;
    var canvas = document.getElementById(my_id);
    var tmp = new Chart(canvas, {
    type: 'bar',
    data: {
      labels: ['Mock','WT','\u0394_vif'],
      datasets: [{
      label: "donor A",
      backgroundColor: 'rgba(0, 0, 30, 0.4)',
      data: [a_mock, a_wt, a_delta_vif]	      
   }, {
      label: "donor B",
      backgroundColor: 'rgba(0, 0, 30, 0.2)',
      data: [b_mock, b_wt, b_delta_vif]	   
   }, {
      label: "donor C",
      backgroundColor:'rgba(255, 0, 0, 0.2)',
      borderColor:'rgba(255,0,0, 1)',
      data: [c_mock, c_wt, c_delta_vif]	   
   }, 
      ]
    },
    options: {
	      legend: {position: 'left'},
        scales: {
	    xAxes: [{
                ticks: {
                    autoSkip: false,
                    maxRotation: 90,
                    minRotation: 90
                }
            }],	
            yAxes: [ 
     {
        id: 'A',
        type: 'linear',
        position: 'left',
        scalePositionLeft: true,
	     ticks: {
                    beginAtZero: true,
                }
      },
            ]
        }
    }
});
}
}
}
{% endblock jquery %}
{% block content %}
<html>
{% include "nav.html" %}
{% for o in uniq_gene_id %}
	<h2> {{o}} </h2>
        <div class="row">
        <div class='col-sm-6'>
	<canvas id={{o}} width=800 height=400></canvas>
        </div>
        var test = 'table_single'
        console.log(test)
        <div class='col-sm-4'>
         {% render_table table_single %}
        </div>
        </div>
{% endfor %}
	</html>
{% endblock content %}
